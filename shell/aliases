#!/usr/bin/env bash

# Git
alias g='git'
alias ga='g add'
alias gaa='ga -A'
alias gb='g branch'
alias gc='g commit'
alias gcl='g clone'
alias gco='g checkout'
alias gd='g diff'
alias gf='g fetch'
alias gl='g log'
alias gm='g merge'
alias gp='g push'
alias gr='g reset'
alias gs='g status -sb'
alias gbn='gco -b'
alias gbr='gb -m'
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]]; then
	alias git_copy_branch='gb --show-current | xclip -selection c'
elif [[ "${OSTYPE:0:6}" = 'darwin' ]]; then
	alias git_copy_branch='gb --show-current | pbcopy'
fi
alias gcb='git_copy_branch'
# shellcheck disable=SC2154
alias git_set_missing_end_of_file='git ls-files -z | while IFS= read -rd "" f; do tail -c1 < "${f}" | read -r _ || echo >> "${f}"; done'
function git_get_repo_from_remote() {
	GIT_PATH="${1:-${PWD}}"
	GIT_REMOTE="${2-origin}"

	git -C "${GIT_PATH}" remote get-url "${GIT_REMOTE}" | sed 's/\.git//' | sed 's/.*github.com\///g' | sed 's/.*://g'
}
function gh_repo_list() {
	if [ -z "${1}" ]; then
		echo 'Please specify a repo prefix (e.g. "bedrock")'
	fi
	gh repo list ItinerisLtd --private --no-archived --source --limit 400 --json name --jq ". | values[] | select(.name | endswith(\"${1}\")) | values[]"
}
function gp_pr_create_with_reviewer {
	[[ -z "${1}" ]] && REVIEWER='ItinerisLtd/php-team' || REVIEWER="${1}"

	gp && gh pr create --fill --reviewer "${REVIEWER}"
}
function gh_actions_cache_delete_all {
	for KEY in $(gh actions-cache list | awk '{print $1}' | sort -u); do
		gh actions-cache delete "${KEY}" --confirm
	done
}

# Composer
alias c='composer'
alias cda='c dump-autoload'
alias ci='c install'
alias cr='c require'
alias crd='cr --dev'
alias crm='c remove'
alias cu='c update'
alias cg='c global'
alias cgrm='cg remove'
alias cgr='cg require'
alias cgu='cg update'

# Node
alias y='yarn'
alias yg='y global'
alias ya='y add'
alias yga='yg add'
alias yad='ya -D'
alias ygad='yga -D'
alias yrm='y remove'
alias yrb='y run build'
alias yrbp='y run build:production'

# WordPress
wp_db_export() {
	ENVIRONMENT="${1}"
	if [[ -z "${ENVIRONMENT}" ]]; then
		echo 'Please specify an environment'
		if [[ -f wp-cli.trellis-alias.yml ]]; then
			rg --color never --no-line-number --only-matching '^@[^:]*' wp-cli.trellis-alias.yml
			echo '@development'
		fi
		return
	fi

	ENVIRONMENT="${ENVIRONMENT//@/}"

	if [[ 'development' == "${ENVIRONMENT}" ]]; then
		wp db export - >"${ENVIRONMENT}_db_$(date +%F).sql"
	else
		wp "@${ENVIRONMENT}" db export - >"${ENVIRONMENT}_db_$(date +%F).sql"
	fi
}
alias t='trellis'
trellis_copy_basic_auth_pass() {
	[ -z "${1}" ] && ENVIRONMENT='staging' || ENVIRONMENT="${1}"
	if [ ! -f "hosts/${ENVIRONMENT}" ]; then
		echo 'Invalid environment provided'
		return 1
	fi

	AUTH_PASS=$(trellis vault view "${ENVIRONMENT}" | grep -o "http_basic_auth_password: .*" | cut -f2- -d: | cut -c2-)
	echo "${AUTH_PASS}"
	if [[ "${OSTYPE:0:6}" =~ ^linux.* ]]; then
		echo "${AUTH_PASS}" | xclip -selection c
	elif [[ "${OSTYPE:0:6}" = 'darwin' ]]; then
		echo "${AUTH_PASS}" | pbcopy
	fi
}
wp_get_user_id() {
	[ -z "${1}" ] && email='wordpress@itineris.co.uk' || email="${1}"
	wp user get "${email}" --field=ID --format=csv --skip-themes --skip-plugins | head -n1 | tr -d '\n'
}
wp_copy_user_id() {
	wp_get_user_id "${1}" | pbcopy
}
wp_reset_local_user_pass() {
	[ -z "${1}" ] && ENVIRONMENT='development' || ENVIRONMENT="${1}"
	if [[ "${ENVIRONMENT}" = 'development' ]]; then
		wp user update "$(wp_get_user_id)" --user_pass=admin --skip-themes --skip-plugins
	else
		wp "@${ENVIRONMENT}" user update "$(wp_get_user_id)" --user_pass=admin --skip-themes --skip-plugins
	fi
}
wp_delete_trash_revison_posts() {
	[ -z "${1}" ] && ENVIRONMENT='development' || ENVIRONMENT="${1}"

	if [[ "${ENVIRONMENT}" = 'development' ]]; then
		ALIAS=''
	else
		ALIAS="@${ENVIRONMENT}"
	fi

	echo 'Deleting revisions...'
	# shellcheck disable=SC2046
	wp ${ALIAS:+$ALIAS} post delete $(wp ${ALIAS:+$ALIAS} post list --post_type=revision --format=ids) --force
	echo 'Deleting trashed posts...'
	# shellcheck disable=SC2046
	wp ${ALIAS:+$ALIAS} post delete $(wp ${ALIAS:+$ALIAS} post list --post_type=any --post_status=trash --format=ids) --force
}
generate_vault_pass() {
	vault_pass=$(
		LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 512
		echo ''
	)
	echo "${vault_pass}" >.vault_pass
}
delete_posts() {
	wp post delete "$(wp post list --post_type="${1}" --format=ids)" --force
}
publish_draft_posts() {
	wp post update "$(wp post list --post_type="${1}" --post_status=draft --format=ids)" --post_status=publish
}
delete_terms() {
	wp term delete "${1}" "$(wp term list "${1}" --format=ids)"
}
set_posts_statuses() {
	wp post update "$(wp post list --post_type="${1}" --post_status="${2}" --format=ids)" --post_status="${3}"
}
project_open() {
	WP_PATH="${HOME}/Code/wordpress"

	if [ -z "${1}" ]; then
		NEW_PATH="${WP_PATH}"
	else
		NEW_PATH="${WP_PATH}/${1}"
	fi

	if [ -z "${2}" ]; then
		cd "${NEW_PATH}" && return || return
	fi

	if [[ "${2}" == @(bedrock|trellis) || "${2}" != "theme" ]]; then
		cd "${NEW_PATH}/${2}" && return || return
	fi

	# Find only themes using Composer.
	THEMES=("${NEW_PATH}/bedrock/web/app/themes/"*/composer.json)
	THEME_PATH="${THEMES[1]//composer.json/}"
	if [ -z "${THEME_PATH}" ]; then
		echo "No theme available"
		return
	fi

	cd "${THEME_PATH}" || return
}
alias po='project_open'
project_edit() {
	WP_PATH="${HOME}/Code/wordpress"

	if [ -z "${1}" ]; then
		echo 'No project specified.'
		return
	fi

	NEW_PATH="${WP_PATH}/${1}"
	if [[ -d "${NEW_PATH}/bedrock" ]]; then
		NEW_PATH="${NEW_PATH}/bedrock"
	elif [[ -d "${NEW_PATH}/site" ]]; then
		NEW_PATH="${NEW_PATH}/site"
	else
		echo 'Project is missing bedrock/site directory'
		return
	fi

	cd "${NEW_PATH}" && tmux_layout dev || return
}
alias pe='project_edit'

trellis_generate_deploy_key() {
	remote=$(g remote -v | head -n1 | rg -o 'ItinerisLtd/(.*)-(bedrock|trellis)' | sed 's/trellis/bedrock/g')
	known_hosts=$(rg 'ansible_host=\d.*\s' hosts/production -o | rg -o '\d.*')
	trellis key generate --repo "${remote}" --known-hosts "${known_hosts}" --no-provision
}
gh_set_vault_pass() {
	remote=$(g remote -v | head -n1 | rg -o 'ItinerisLtd/(.*)-(bedrock|trellis)' | sed 's/-trellis//g;s/-bedrock//g')
	if [[ "${PWD}" == *bedrock ]]; then
		local vault_pass='../trellis/.vault_pass'
	elif [[ "${PWD}" == *trellis ]]; then
		local vault_pass='./.vault_pass'
	fi
	gh secret set ANSIBLE_VAULT_PASSWORD --repo "${remote}-trellis" <"${vault_pass}"
	gh secret set ANSIBLE_VAULT_PASSWORD --repo "${remote}-bedrock" <"${vault_pass}"
}
gh_set_repo_pat() {
	if [ -z "${1}" ]; then
		echo 'Please provide a PAT.'
		exit 1
	fi

	remote=$(g remote -v | head -n1 | rg -o 'ItinerisLtd/(.*)-(bedrock|trellis)' | sed 's/-trellis//g;s/-bedrock//g')
	gh secret set REPO_PAT -b "${1}" --repo "${remote}-bedrock"
}
valet() {
	case "${1}" in
	open)
		ARGS=("open")
		if [[ -n "${2}" ]]; then
			ARGS+=("${2}")
		else
			DIRNAME="$(dirname "${PWD}")"
			CURRDIRNAME="$(basename "${PWD}")"
			if [[ bedrock == "${CURRDIRNAME}" ]]; then
				BASENAME="$(basename "${DIRNAME}")"
				ARGS+=("${BASENAME}")
			fi
		fi
		;;
	*)
		ARGS=("${@}")
		;;
	esac

	/usr/local/bin/valet "${ARGS[@]}"
}
wp_valet_link_all_network_sites() {
	for domain in $(wp site list --field=url | sed 's/.*:\/\///g' | sed 's/\.test*\///g'); do
		echo "${domain}"
		valet link --secure "${domain}"
	done
}

# Navigation
alias up1='cd ..'
alias up2='cd ../..'
alias up3='cd ../../..'
alias up4='cd ../../../..'
alias up5='cd ../../../../..'

# Misc
alias v='vim'
## Use NVIM instead of VIM if installed
if type nvim >/dev/null 2>&1; then
	alias vim='nvim'
fi
## Ensure full path is created
alias mkdir='mkdir -p'
## Ensure coloured output on ls
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]]; then
	alias ls='ls --color'
elif [[ "${OSTYPE:0:6}" = "darwin" ]]; then
	alias ls='ls -G'
fi
alias ll='ls -alh'
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]]; then
	alias open='xdg-open'
fi
alias watch_error_log='tail -f ~/.valet/Log/nginx-error.log'
alias ducks='du -cks * | sort -rn | head'
alias whatsmyip='curl -s https://api.ipify.org; echo'
alias show_path='echo ${PATH} | tr -s ":" "\n"'
alias generate_string='openssl rand -base64 500 | tr -dc "a-zA-Z0-9" | fold -w 128 | head -n 1'
alias generate_satis_pass='openssl rand -base64 500 | tr -dc a-zA-Z0-9 | fold -w 64 | head -n 1'
alias clear_dns_cache='sudo killall -HUP mDNSResponder'
alias cat='cat -n'
alias find_bad_words='curl --silent http://www.bannedwordlist.com/lists/swearWords.txt > /tmp/badwords && rg --word-regexp --file=/tmp/badwords'
alias rg_ip_address='rg "(?:[0-9]{1,3}\.){3}[0-9]{1,3}" --only-matching'

watch_file() {
	tail -f "${1}" | bat --paging=never -l log
}

# Tmux
tmux_layout() {
	layout_file="${HOME}/.dotfiles/tmux/layouts/${1}.sh"
	if [[ ! -f "${layout_file}" ]]; then
		echo 'Please specify a valid layout file'
		return
	fi

	cwd=$(pwd)
	if [[ -d "${2}" ]]; then
		working_dir="${2}"
	else
		working_dir="${cwd}"
	fi

	cd "${working_dir}" && "${layout_file}" && cd "${cwd}" || exit
}

# Previews
mdp() {
	pandoc "${1}" | lynx -stdin
}

# Laravel
alias sail='[ -f sail ] && bash sail || bash vendor/bin/sail'

# PHP
php_switch_version() {
	VERSION="${1//[!0-9]/}"
	if [[ -z "${VERSION}" ]]; then
		echo 'No version provided.'
		return
	fi

	ORIGINAL_CLI_PATH='/usr/bin/php'
	NEW_CLI_PATH="${ORIGINAL_CLI_PATH}${VERSION}"
	if [[ ! -f "${NEW_CLI_PATH}" ]]; then
		echo "${NEW_CLI_PATH} does not exist."
		return
	fi

	if [[ ! -L "${ORIGINAL_CLI_PATH}" ]]; then
		echo "${ORIGINAL_CLI_PATH} is not a symlink so you shall not pass."
		return
	fi

	ORIGINAL_UNIT_PATH='/usr/lib/systemd/system/php-fpm.service'
	NEW_UNIT_PATH="/usr/lib/systemd/system/php-fpm${VERSION}.service"
	if [[ ! -f "${NEW_UNIT_PATH}" ]]; then
		echo "${NEW_UNIT_PATH} does not exist."
		return
	fi

	if [[ ! -L "${ORIGINAL_UNIT_PATH}" ]]; then
		echo "${ORIGINAL_UNIT_PATH} is not a symlink so you shall not pass."
		return
	fi

	echo "Switching to php${VERSION}..."
	sudo rm "${ORIGINAL_CLI_PATH}" && sudo ln -s "${NEW_CLI_PATH}" "${ORIGINAL_CLI_PATH}"

	sudo systemctl disable php-fpm
	sudo rm "${ORIGINAL_UNIT_PATH}" && sudo ln -s "${NEW_UNIT_PATH}" "${ORIGINAL_UNIT_PATH}"
	sudo systemctl restart php-fpm
	sudo systemctl enable php-fpm
}

# vim: set filetype=bash :
