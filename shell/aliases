# Git
alias g='git'
alias ga='g add'
alias gaa='ga -A'
alias gb='g branch'
alias gc='g commit'
alias gcl='g clone'
alias gco='g checkout'
alias gd='g diff'
alias gf='g fetch'
alias gl='g log'
alias gm='g merge'
alias gp='g push'
alias gr='g reset'
alias gs='g status -sb'
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]] ; then
  alias git_copy_branch='gb --show-current | xclip -selection c'
elif [[ "${OSTYPE:0:6}" = 'darwin' ]] ; then
  alias git_copy_branch='gb --show-current | pbcopy'
fi
alias gcb='git_copy_branch'
alias git_set_missing_end_of_file='git ls-files -z | while IFS= read -rd "" f; do tail -c1 < "$f" | read -r _ || echo >> "$f"; done'

# Composer
alias c='composer'
alias cda='c dump-autoload'
alias ci='c install'
alias cr='c require'
alias crd='cr --dev'
alias crm='c remove'
alias cu='c update'

# Node
alias y='yarn'
alias ya='y add'
alias yad='ya -D'
alias yrm='y remove'
alias yrb='y run build'
alias yrbp='y run build:production'

# WordPress
alias export_staging='wp @staging db export - > "staging_db_$(date +%F).sql"'
alias export_production='wp @production db export - > "production_db_$(date +%F).sql"'
alias t='trellis'
alias trellis_copy_basic_auth_pass='trellis vault view staging | grep -o "http_basic_auth_password: .*" | cut -f2- -d: | cut -c2- | pbcopy'
wp_copy_user_id() {
  [ -z "$1" ] && email='wordpress@itineris.co.uk' || email="$1"
  wp user get "$email" --field=ID --format=csv | head -n1 | tr -d '\n' | pbcopy
}
generate_vault_pass() {
  vault_pass=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 512; echo '')
  echo "$vault_pass" > .vault_pass
}
delete_posts() {
  wp post delete $(wp post list --post_type=$1 --format=ids) --force
}
publish_draft_posts() {
  wp post update $(wp post list --post_type=$1 --post_status=draft --format=ids) --post_status=publish
}
delete_terms() {
  wp term delete $1 $(wp term list $1 --format=ids)
}
set_posts_statuses() {
  wp post update $(wp post list --post_type=$1 --post_status=$2 --format=ids) --post_status=$3
}

# Navigation
alias up1='cd ..'
alias up2='cd ../..'
alias up3='cd ../../..'
alias up4='cd ../../../..'
alias up5='cd ../../../../..'

# Misc
alias v='vim'
## Use NVIM instead of VIM if installed
if type nvim > /dev/null 2>&1; then
  alias vim='nvim'
fi
## Ensure full path is created
alias mkdir='mkdir -p'
## Ensure coloured output on ls
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]] ; then
  alias ls='ls --color'
elif [[ "${OSTYPE:0:6}" = "darwin" ]] ; then
  alias ls='ls -G'
fi
alias ll='ls -alh'
if [[ "${OSTYPE:0:6}" =~ ^linux.* ]] ; then
  alias open='xdg-open'
fi
alias watch_error_log='tail -f ~/.valet/Log/nginx-error.log'
alias ducks='du -cks * | sort -rn | head'
alias whatsmyip='curl -s https://api.ipify.org; echo'
alias show_path='echo $PATH | tr -s ":" "\n"'
alias generate_string='openssl rand -base64 500 | tr -dc 'a-zA-Z0-9' | fold -w 128 | head -n 1'
alias generate_satis_pass='openssl rand -base64 500 | tr -dc a-zA-Z0-9 | fold -w 64 | head -n 1'
alias clear_dns_cache='sudo killall -HUP mDNSResponder'
alias cat='cat -n'

# Tmux
tmux_layout() {
  layout_file="$HOME/.dotfiles/tmux/layouts/$1.sh"
  echo "$layout_file"
  if [[ ! -f "$layout_file" ]]; then
    echo 'Please specify a valid layout file'
    return
  fi

  cwd=$(pwd)
  if [[ -d "$2" ]]; then
    working_dir="$2"
  else
    working_dir="$cwd"
  fi

  cd "$working_dir" && "$layout_file" && cd "$cwd"
}

# Previews
mdp() {
  pandoc "$1" | lynx -stdin
}

# vi:syntax=sh
