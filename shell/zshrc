# Load shell variables
if [ -f "${HOME}/.shell_variables" ]; then
	source "${HOME}/.shell_variables"
fi

# Zinit
source ~/.zinit/bin/zinit.zsh

if [[ "${OSTYPE:0:6}" == "darwin" ]]; then
	# iTerm2 shell integration
	if [[ -f ~/.iterm2_shell_integration.zsh ]]; then
		source "${HOME}/.iterm2_shell_integration.zsh"
	fi

	export PATH="${HOME}/Library/Python/3.9/bin:/usr/local/opt/ruby/bin:/usr/local/lib/ruby/gems/3.0.0/bin:/usr/local/sbin:${PATH}"
else
	export PATH="${PATH}:${HOME}/.local/share/gem/ruby/3.0.0/bin"
fi

# General bin paths
PATH="${PATH}:/usr/local/bin:${HOME}/.local/bin"

# Dotfiles bin
PATH="${PATH}:${HOME}/.dotfiles/bin"

ITINERIS_BIN_PATH="${HOME}/Code/misc/itineris-bin"
if [[ -d "${ITINERIS_BIN_PATH}" ]]; then
	PATH="${PATH}:${ITINERIS_BIN_PATH}"
fi

# Composer
if type composer &>/dev/null; then
	export PATH="${PATH}:$(composer config -g home)/vendor/bin"
fi

# Homebrew
if type brew &>/dev/null; then
	FPATH=$(brew --prefix)/share/zsh/site-functions:${FPATH}

	autoload -Uz compinit
	compinit
fi

# Golang
if type go &>/dev/null; then
	export GOPATH="$(go env GOPATH)"
	export PATH="${PATH}:${GOPATH}/bin"
fi

# Luarocks
if type luarocks &>/dev/null; then
	export PATH="${PATH}:${HOME}/.luarocks/bin"
fi

# Cargo
if type cargo &>/dev/null; then
	export PATH="${PATH}:${HOME}/.cargo/bin"
fi

# Pyenv
export PYENV_ROOT="${HOME}/.pyenv"
export PATH="${PYENV_ROOT}/bin:${PATH}"
if type pyenv &>/dev/null; then
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
fi

# Load sensitive variables such as credentials and tokens
if [ -f ~/.shell_env ]; then
	source ~/.shell_env
fi

# Plugins
zinit ice wait"0b" lucid atload'bindkey "${terminfo}[kcuu1]" history-substring-search-up; bindkey "${terminfo}[kcud1]" history-substring-search-down'
zinit light zsh-users/zsh-history-substring-search
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
zinit ice wait"0a" lucid atload"_zsh_autosuggest_start"
zinit light zsh-users/zsh-autosuggestions
zinit ice wait"0b" lucid blockf
zinit light zsh-users/zsh-completions
zinit ice wait"0c" lucid atinit"zpcompinit;zpcdreplay"
zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice wait"1" lucid
zinit ice atload '! type node &>/dev/null && nvm install --lts'
zinit snippet OMZP::npm
zinit snippet OMZP::composer

# Theme
zinit light spaceship-prompt/spaceship-prompt
zinit light spaceship-prompt/spaceship-vi-mode

# Spaceship Prompt
SPACESHIP_TIME_SHOW=true
SPACESHIP_PROMPT_ORDER=(
	user      # Username section
	dir       # Current directory section
	host      # Hostname section
	git       # Git section (git_branch + git_status)
	package   # Package version
	node      # Node.js section
	php       # PHP section
	venv      # virtualenv section
	exec_time # Execution time
	line_sep  # Line break
	battery   # Battery level and status
	# vi_mode   # Vi-mode indicator
	jobs      # Background jobs indicator
	exit_code # Exit code section
	char      # Prompt character
)

SPACESHIP_RPROMPT_ORDER=(
	time # Time stampts section
)

spaceship add --before char vi_mode

# Setup history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=1000
setopt SHARE_HISTORY

autoload -U compinit && compinit
zmodload -i zsh/complist
compdef __git_branch_names gpDo

# Node
export NVM_SYMLINK_CURRENT=true
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
if ! type node &>/dev/null; then
	nvm install --lts && nvm use --lts && nvm alias default 'lts/*'
fi

autoload -U add-zsh-hook
load-nvmrc() {
	local nvmrc_path
	nvmrc_path="$(nvm_find_nvmrc)"

	if [ -n "$nvmrc_path" ]; then
		local nvmrc_node_version
		nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		if [ "$nvmrc_node_version" = "N/A" ]; then
			nvm install
		elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
			nvm use
		fi
	elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
		echo "Reverting to nvm default version"
		nvm use default
	fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

# Yarn
if ! type yarn &>/dev/null; then
	if ! type corepack; then
		npm i -g corepack
	fi

	corepack enable
fi
export PATH="${PATH}:${HOME}/.yarn/bin"

# Trellis
if ! type trellis &>/dev/null; then
	curl -sL https://raw.githubusercontent.com/roots/trellis-cli/master/scripts/get | bash -s -- -b ~/.local/bin
fi
eval "$(trellis shell-init zsh)"

# Load aliases
if [ -f "${HOME}/.shell_aliases" ]; then
	source "${HOME}/.shell_aliases"
fi

# Set local and remote editor
export EDITOR='vim'

# ssh
export SSH_KEY_PATH="~/.ssh/rsa_id"

# Key bindings
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Misc
export WORDCHARS=${WORDCHARS/\//}
export EDITOR=nvim
setopt HIST_IGNORE_SPACE
